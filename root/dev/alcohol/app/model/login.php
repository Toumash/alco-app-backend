<?php

	require_once R . '/model/model.php';


	class LoginModel extends Model
	{

		public function getAll()
		{
			return $this->select('categories');
		}

		public function delete($id)
		{
			$del = $this->pdo->prepare('DELETE FROM categories where id=:id');
			$del->bindValue(':id', $id, PDO::PARAM_INT);
			$del->execute();
		}

		public function fastLogin($login, $password)
		{
			$result = $this->login($login, $password);
			if ($result == 'activation') {
				return 'activation';
			}
			if ($result == false) {
				return false;
			} else {
				return intval($result['ID']);
			}

		}

		public function login($login, $password)
		{
			$select = $this->pdo->prepare(
				"SELECT ID,PERMISSIONS,ACTIVATION FROM users as u where u.LOGIN=:login and u.PASSWORD =:md5password LIMIT 1"
			);
			$select->bindValue(':login', $login, PDO::PARAM_STR);
			$select->bindValue(':md5password', md5($password), PDO::PARAM_STR);
			$select->execute();
			$obj = $select->fetch(PDO::FETCH_ASSOC);

			return $obj;


		}

		/**
		 * @param $login      string pure user string
		 * @param $password   string pure user password
		 * @param $install_id string the unique id generated by the application
		 *
		 * @return array|bool|mixed|string
		 */
		public function loginForApp($login, $password, $install_id)
		{
			$select = $this->pdo->prepare(
				"SELECT ID,PERMISSIONS,ACTIVATION FROM users as u where u.LOGIN=:login and u.PASSWORD =:md5password LIMIT 1"
			);
			$select->bindValue(':login', $login, PDO::PARAM_STR);
			$select->bindValue(':md5password', md5($password), PDO::PARAM_STR);
			$select->execute();
			$obj = $select->fetch(PDO::FETCH_ASSOC);
			//$success = $select->fetchAll(PDO::FETCH_NUM)==1;
			//$success = $select->fetchColumn()>0;
			if (is_array($obj)) {
				if (strlen($obj['ACTIVATION'] > 2)) {
					return 'activation';
				}
				// Obtaining install_id (integer)
				$s = $this->pdo->prepare("SELECT installID FROM app_installs where id=:install_id LIMIT 1");
				$s->bindValue(':install_id', $install_id);
				$s->execute();
				$DBinstallID = $s->fetch(PDO::FETCH_ASSOC);
				$DBinstallID = $DBinstallID['installID'];


				// if the installation is not in the database
				if (!isset($DBinstallID)) {
					/** @var $installsModel InstallsModel */
					$installsModel = $this->loadModel('installs');
					$installsModel->register($install_id);

					// Obtainig the install_id second time (integer)
					$s = $this->pdo->prepare("SELECT installID FROM app_installs where id=:install_id LIMIT 1");
					$s->bindValue(':install_id', $install_id);
					$s->execute();
					$DBinstallID = $s->fetch(PDO::FETCH_ASSOC);
					$DBinstallID = $DBinstallID['installID'];
				}


				// Checking if install is already logged-in
				$sql = $this->pdo->prepare(
					"SELECT COUNT(s.id) AS c FROM sessions AS s WHERE s.installID=:id"
				);
				$sql->bindValue(':id', $DBinstallID, PDO::PARAM_INT);
				$sql->execute();
				$r = $sql->fetch(PDO::FETCH_ASSOC);


				// New, generated session_id
				$session_token = md5(uniqid(rand(), true));

				// if theres no session running on the instalation
				if ($r['c'] == 0) {
					$s = $this->pdo->prepare(
						"INSERT INTO sessions(token,userID,installID) VALUES (:session_token,:userID,:install_id)"
					);
					$s->bindValue(':install_id', $DBinstallID, PDO::PARAM_INT);
					$s->bindValue(':session_token', $session_token, PDO::PARAM_INT);
					$s->bindValue(':userID', $obj['ID'], PDO::PARAM_INT);
					$s->execute();

				} else {
					$s = $this->pdo->prepare(
						"UPDATE sessions SET token=:token,userID=:user_id WHERE installID=:install_id"
					);
					$s->bindValue(':token', $session_token);
					$s->bindValue(':user_id', $obj['ID'], PDO::PARAM_INT);
					$s->bindValue(':install_id', $DBinstallID, PDO::PARAM_INT);
					$s->execute();
				}
				$obj['session_token'] = $session_token;

				return $obj;
			} else {
				return false;
			}
		}

		public function requireSessionLogged($session_token)
		{
			$sql = $this->pdo->prepare("SELECT COUNT(*) AS c FROM sessions where token = :token");
			$sql->bindValue(':token', $session_token, PDO::PARAM_STR);
			$sql->execute();
			$result = $sql->fetch(PDO::FETCH_ASSOC);

			return $result['c'] > 0;
		}

	}